; expect: SAT

; generated by nunchaku
(declare-datatypes () ((nat (z) 
                            (s (select-s-0 nat)))))
(declare-sort iota 0)
(declare-datatypes
   ()
   ((list_iota
       (nil_iota) 
       (cons_iota (select-cons_iota-0 iota) (select-cons_iota-1 list_iota)))))
(declare-fun t () iota)
(define-fun-rec
   even ((v_0 nat)) Bool
     (or
      (match v_0 (case z true) 
                 (case default false)) 
      (match v_0
        (case (s x_0)
           (match x_0 (case (s x_0_0) (even x_0_0)) 
                      (case default false))) 
        (case default false))))
(declare-datatypes () ((_nat (_zero) 
                             (_succ (select-_succ-0 _nat)))))
(declare-fun decr_odd () _nat)
(define-fun-rec
   odd ((v_0_0 _nat) (v_1 nat)) Bool
     (or
      (match v_0_0
        (case (_succ x_0_2)
           (match v_1
             (case (s x_0_1) (match x_0_1 (case z true) 
                                          (case default false))) 
             (case default false))) 
        (case default false)) 
      (match v_0_0 (case (_succ x_0_3) (odd x_0_3 v_1)) 
                   (case default false)) 
      (match v_0_0
        (case (_succ x_0_5)
           (match v_1
             (case (s x_0_4)
                (match x_0_4
                  (case (s x_0_6) (odd x_0_5 x_0_6)) 
                  (case default false))) 
             (case default false))) 
        (case default false))))
(declare-fun decr_has_len_iota () _nat)
(define-fun-rec
   has_len_iota ((v_0_1 _nat) (v_1_0 list_iota) (v_2 nat)) Bool
     (or
      (match v_0_1
        (case (_succ x_0_7)
           (match v_1_0
             (case nil_iota (match v_2 (case z true) 
                                       (case default false))) 
             (case default false))) 
        (case default false)) 
      (match v_0_1
        (case (_succ x_0_8)
           (match v_1_0
             (case (cons_iota x_0_10 x_1)
                (match v_2
                  (case (s x_0_9) (has_len_iota x_0_8 x_1 x_0_9)) 
                  (case default false))) 
             (case default false))) 
        (case default false))))
(assert-not
 (or
  (not (has_len_iota decr_has_len_iota (cons_iota t (cons_iota t nil_iota)) 
         (s (s z)))) 
  (not (even (s (s (s (s z)))))) 
  (not (odd decr_odd (s (s (s (s (s z)))))))))
(check-sat)

